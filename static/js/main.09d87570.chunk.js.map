{"version":3,"sources":["routes/public-routes.ts","components/PublicLayout/PublicLayout.tsx","routes/RouterTemplate.tsx","App.tsx","utils/StringUtils.ts","services/cookie.service.ts","index.tsx"],"names":["root","component","React","lazy","path","projects","skills","PublicLayout","props","Component","id","withRouter","prop","fallback","_","map","publicRoutes","route","key","exact","render","App","className","StringUtils","lang","window","navigator","language","indexOf","cookieService","TIME_OUT","name","document","encodeURIComponent","RegExp","test","cookie","this","check","result","exec","decodeURIComponent","split","i","length","currCookie","replace","value","expires","domain","secure","cookieStr","Date","getTime","toUTCString","set","exceptLang","getAll","cookieName","delete","deleteAll","get","defaultLang","browserLanguage","antLang","jaJP","zhCN","enUS","ReactDOM","locale","getElementById"],"mappings":"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","file":"static/js/main.09d87570.chunk.js","sourcesContent":["import React from 'react';\nimport { RouteProps } from 'react-router';\n\nconst HomeView = React.lazy(() => import('../views/HomeView/HomeView'));\nconst ProjectListView = React.lazy(() => import('../views/ProjectListView/ProjectListView'));\nconst SkillView = React.lazy(() => import('../views/SkillView/SkillView'));\n\nexport default {\n  root: {\n    component: HomeView,\n    path: '/',\n  } as RouteProps,\n  projects: {\n    component: ProjectListView,\n    path: '/projects',\n  } as RouteProps,\n  skills: {\n    component: SkillView,\n    path: '/skills',\n  } as RouteProps,\n};\n","import React, { ElementType } from 'react';\nimport './PublicLayout.scss';\nimport { RouteComponentProps } from 'react-router-dom';\n\ntype Props = {\n  component: ElementType;\n} & RouteComponentProps;\n\nconst PublicLayout: React.FC<Props> = props => {\n  const Component = props.component;\n  return (\n    <article id=\"main\">\n      <Component {...props}></Component>\n    </article>\n  );\n};\n\nexport default PublicLayout;\n","// import { TransitionGroup, CSSTransition } from 'react-transition-group';\nimport React, { Suspense } from 'react';\nimport _ from 'lodash';\nimport publicRoutes from './public-routes';\nimport { Switch, Route, withRouter, HashRouter } from 'react-router-dom';\nimport { RouteComponentProps } from 'react-router-dom';\nimport PublicLayout from '../components/PublicLayout/PublicLayout';\n\ntype PageProps = {} & RouteComponentProps;\n\nconst RouterTemplate: React.FC<PageProps> = prop => {\n  return (\n    <HashRouter>\n      <Switch>\n        <Suspense fallback={<h1>Loading...</h1>}>\n          {_.map(publicRoutes, (route: any, key: string) => {\n            const { component, path } = route;\n            return <Route exact key={key} path={path} render={route => <PublicLayout component={component} {...route} />} />;\n          })}\n        </Suspense>\n      </Switch>\n    </HashRouter>\n  );\n};\n\nexport default withRouter(RouterTemplate);\n","import React from 'react';\nimport { RouteComponentProps } from 'react-router';\nimport './App.scss';\nimport RouterTemplate from './routes/RouterTemplate';\n\ntype PageProps = {} & RouteComponentProps;\n\nconst App: React.FC<PageProps> = props => {\n  return (\n    <div id=\"app\" className=\"app\">\n      <RouterTemplate {...props}></RouterTemplate>\n    </div>\n  );\n}\n\nexport default App;\n","export class StringUtils {\n  /**\n   * ブラウザ言語コード取得\n   */\n  static browserLanguage(): string {\n    let lang = window.navigator.language;\n    if (lang) {\n      if (lang.indexOf('ja') >= 0) {\n        return 'ja';\n      } else {\n        return 'zh';\n      }\n    } else {\n      return 'ja';\n    }\n  }\n}\n","class CookieService {\n  private readonly TIME_OUT = 24;\n\n  constructor() {}\n\n  /**\n   * Checks the existence of a single cookie by it's name\n   *\n   * @param  {string} name Identification of the cookie\n   * @returns existence of the cookie\n   */\n  public check(name: string): boolean {\n    if (typeof document === 'undefined') return false; // Check if document exist avoiding issues on server side prerendering\n    name = encodeURIComponent(name);\n    let regexp = new RegExp('(?:^' + name + '|;\\\\s*' + name + ')=(.*?)(?:;|$)', 'g');\n    let exists = regexp.test(document.cookie);\n    return exists;\n  }\n\n  /**\n   * Retrieves a single cookie by it's name\n   *\n   * @param  {string} name Identification of the Cookie\n   * @returns The Cookie's value\n   */\n  public get(name: string): string {\n    if (this.check(name)) {\n      name = encodeURIComponent(name);\n      const regexp = new RegExp('(?:^' + name + '|;\\\\s*' + name + ')=(.*?)(?:;|$)', 'g');\n      const result = regexp.exec(document.cookie)!;\n      return decodeURIComponent(result[1]);\n    } else {\n      return '';\n    }\n  }\n\n  /**\n   * Retrieves a a list of all cookie avaiable\n   *\n   * @returns Object with all Cookies\n   */\n  public getAll(): any {\n    let cookieService: any = {};\n\n    if (document.cookie && document.cookie != '') {\n      let split = document.cookie.split(';');\n      for (let i = 0; i < split.length; i++) {\n        let currCookie = split[i].split('=');\n        currCookie[0] = currCookie[0].replace(/^ /, '');\n        cookieService[decodeURIComponent(currCookie[0])] = decodeURIComponent(currCookie[1]);\n      }\n    }\n\n    return cookieService;\n  }\n\n  /**\n   * Save the Cookie\n   *\n   * @param  {string} name Cookie's identification\n   * @param  {string} value Cookie's value\n   * @param  {number} expires Cookie's expiration date in days from now or at a specific date from a Date object. If it's undefined the cookie is a session Cookie\n   * @param  {string} path Path relative to the domain where the cookie should be avaiable. Default /\n   * @param  {string} domain Domain where the cookie should be avaiable. Default current domain\n   * @param  {boolean} secure If true, the cookie will only be available through a secured connection\n   */\n  public set(name: string, value: string, expires?: number | Date, path?: string, domain?: string, secure?: boolean) {\n    let cookieStr = encodeURIComponent(name) + '=' + encodeURIComponent(value) + ';';\n\n    if (expires) {\n      if (typeof expires === 'number') {\n        let dtExpires = new Date(new Date().getTime() + expires * 1000 * 60 * 60);\n        cookieStr += 'expires=' + dtExpires.toUTCString() + ';';\n      } else {\n        cookieStr += 'expires=' + expires.toUTCString() + ';';\n      }\n    }\n    path = '/';\n    if (path) {\n      cookieStr += 'path=' + path + ';';\n    }\n    if (domain) {\n      cookieStr += 'domain=' + domain + ';';\n    }\n    if (secure) {\n      cookieStr += 'secure;';\n    }\n\n    // console.log(cookieStr);\n    document.cookie = cookieStr;\n  }\n\n  /**\n   * Removes specified Cookie\n   *\n   * @param  {string} name Cookie's identification\n   * @param  {string} path Path relative to the domain where the cookie should be avaiable. Default /\n   * @param  {string} domain Domain where the cookie should be avaiable. Default current domain\n   */\n  public delete(name: string, path?: string, domain?: string): void {\n    this.set(name, '', -1, path, domain);\n  }\n\n  /**\n   * Delete all cookie avaiable\n   */\n  public deleteAll(path?: string, domain?: string, exceptLang: boolean = false): void {\n    let cookieService: any = this.getAll();\n\n    for (let cookieName in cookieService) {\n      if (exceptLang && cookieName == 'lang') {\n        continue;\n      }\n      this.delete(cookieName, path, domain);\n    }\n  }\n\n  /**\n   * Delete all cookie but language\n   * @param path\n   * @param domain\n   */\n  public deleteAllButLang(path?: string, domain?: string): void {\n    this.deleteAll(path, domain, true);\n  }\n\n  /**\n   * Language setter\n   */\n  public set language(lang: string) {\n    this.set('lang', lang, this.TIME_OUT);\n  }\n\n  /**\n   * Language getter\n   */\n  public get language(): string {\n    return this.get('lang');\n  }\n}\n\nexport const cookieService = new CookieService();\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport 'ant-design-style-sumamry/dist/ant-design-style-summary.min.css';\nimport App from './App';\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport jaJP from 'antd/es/locale/ja_JP';\nimport zhCN from 'antd/es/locale/zh_CN';\nimport enUS from 'antd/es/locale/en_US';\nimport { ConfigProvider } from 'antd';\nimport { StringUtils } from './utils/StringUtils';\nimport { cookieService } from './services/cookie.service';\n\nlet defaultLang = cookieService.language || StringUtils.browserLanguage();\nlet antLang: any = jaJP;\nif (defaultLang) {\n  if (defaultLang === 'zh') {\n    antLang = zhCN;\n    defaultLang = 'zh';\n  } else if (defaultLang === 'en') {\n    antLang = enUS;\n    defaultLang = 'en';\n  }\n\n  cookieService.language = defaultLang;\n}\n\nReactDOM.render(\n  <ConfigProvider locale={antLang}>\n    <BrowserRouter>\n      <Route component={App} path=\"/\" />\n    </BrowserRouter>\n  </ConfigProvider>,\n  document.getElementById('root')\n);\n\n// serviceWorker.unregister();\n"],"sourceRoot":""}